#!/usr/bin/env sh

# 2-Clause BSD License
#
# Copyright (c) 2024 Shi Yanling
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

EDITOR=${EDITOR:-vi}
PWD=${PWD:-$(pwd)}
sffpipe="$2"
sffdir=${sffpipe%/*}

sel="${sffdir}/.selection"
exbuf1="${sffdir}/.exec-buf1"
exbuf2="${sffdir}/.exec-buf2"
lastop="${sffdir}/.last-operation"
cpbuf="${sffdir}/.copy-buf"
tsel="${sffdir}/.tmpsel"
tbuf1="${sffdir}/.tmpbuf1"
tbuf2="${sffdir}/.tmpbuf2"

x=''
err=''

# === sff extension functions ===

sffpipe_clear_sel()
{
	[ -p "$sffpipe" ] && printf "-" >"$sffpipe"
}

sffpipe_refresh()
{
	[ -p "$sffpipe" ] && printf "*" >"$sffpipe"
	[ "$1" = 'clrsel' ] && sffpipe_clear_sel
}

sffpipe_sel_new()
{
	name="$1"
	[ "$1" = "$exbuf1" -o "$1" = "$exbuf2" ] \
	&& name=$(tr '\n\0' '\035\n' <"$1" | head -n1 | tr -d '\n' | tr '\035' '\n')

	[ -p "$sffpipe" ] && printf "n%s\036" "$name" >"$sffpipe"
}

sff_init_bufs()
{
	[ -e "$exbuf1" ] && [ -e "$exbuf2" ] && [ -e "$lastop" ] && [ -e "$cpbuf" ] && return 0

	touch -a "$exbuf1" "$exbuf2" "$lastop" "$cpbuf"
	chmod 600 "$exbuf1" "$exbuf2" "$lastop" "$cpbuf"

	if [ ! -O "$sffdir" ]; then
		case "$(uname -s)" in
		'Linux') uid=$(stat -c %u "$sffdir");;
		*) uid=$(stat -f %u "$sffdir");;
		esac
		chown "$uid" "$exbuf1" "$exbuf2" "$lastop" "$cpbuf"
	fi
}

sff_abort()
{
	rm -f "$tsel" "$tbuf1" "$tbuf2"
	[ "$1" ] && rm -f "$1"
	: >"$lastop"
	exit 0
}

sff_pwd_perm()
{
	if [ ! -w "$PWD" ]; then
		printf "\n%s: Permission denied\n" "$PWD"
		read -p "Press Enter to continue " -r x
		exit 0
	fi
}

sff_new()
{
	sff_pwd_perm
	sff_init_bufs
	tlist="${sffdir}/.Create-Files"
	rm -f "$tlist" "$tbuf1" "$tbuf2"

	while true; do
		"$EDITOR" "$tlist"
		[ -e "$tlist" ] && sed -e 's/^\/*//' -e 's/[ \t]*$//' -e '/^$/d' "$tlist" >"$tbuf1"
		[ ! -s "$tbuf1" ] && sff_abort "$tlist"

		sed -e 's/\/.*$//' "$tbuf1" | sort -u >"$tbuf2"
		dlin=$(xargs ls -1d -- 2>/dev/null <"$tbuf2" | head -n80)
		[ -z "$dlin" ] && break

		printf "\n%s\n" "$dlin"
		echo "^^^: File(s) already exist"
		echo "e) edit the list"
		echo "q) abort"
		read -p "(e/q) [default=e]: " -r x
		[ "$x" = 'q' ] && sff_abort "$tlist"
	done

	sed -e "s^$PWD/" "$tbuf2" | tr '\n' '\0' >"$exbuf2"
	sed -e '/\//!d' -e 's/\/[^/]*$//' -e "s^$PWD/" "$tbuf1" | sort -u | tr '\n' '\0' >"$exbuf1"
	printf "\037" >>"$exbuf1"
	sed -e '/\/$/d' -e "s^$PWD/" "$tbuf1" | tr '\n' '\0' >>"$exbuf1"

	rm -f "$tlist" "$tbuf1" "$tbuf2"
	sff_do_new
}

sff_do_new()
{
	printf "new" >"$lastop"
	sffpipe_sel_new "$exbuf2"

	cut -d '' -f1 "$exbuf1" | tr -d '\n' | xargs -r -0 mkdir -p -- || err=1
	cut -d '' -f2 "$exbuf1" | tr -d '\n' | xargs -r -0 touch -- || err=1
	[ "$err" ] && read -p "Press Enter to continue " -r x
}

sff_undo_new()
{
	[ ! -s "$exbuf2" ] && exit 0
	op=$(cat "$lastop")

	echo ""
	tr '\0' '\n' <"$exbuf2" | head -n160
	echo "^^^:" $(tr '\n\0' '\035\n' <"$exbuf2" | wc -l) "file(s) will be permanently deleted!"
	read -p "Undo '${op}' operation? (y/n) [default=n]: " -r x
	[ "$x" != 'y' ] && exit 0

	printf "un%s" "$op" >"$lastop"
	sffpipe_refresh

	xargs -0 rm -rf -- <"$exbuf2" || err=1
	[ "$err" ] && read -p "Press Enter to continue " -r x
}

sff_write_cbuf()
{
	[ ! -s "$sel" ] && exit 0
	sff_init_bufs
	printf "$1" >"$lastop"
	sffpipe_clear_sel
	tr '\n\0' '\035\n' <"$sel" >"$cpbuf"
	[ "$1" = 'mv' ] && chmod u+s "$cpbuf"
}

sff_view_cbuf()
{
	echo ""
	if [ -s "$cpbuf" ]; then
		cat "$cpbuf" | head -n160
		echo $(wc -l <"$cpbuf") "file(s) in buffer"
	else
		echo "Buffer is empty"
	fi
	read -p "Press Enter to continue " -r x
}

sff_clear_cbuf()
{
	[ -s "$cpbuf" ] && : >"$cpbuf"
}

sff_paste()
{
	[ ! -s "$cpbuf" ] && exit 0
	[ "$(find "$cpbuf" -mmin +30)" ] && exit 0
	sff_pwd_perm

	op='copy'
	ls -l "$cpbuf" | grep -q '^...[sS]' && op='move' && chmod u-s "$cpbuf"

	dlin=$(sed 's/^.*\///' "$cpbuf" | tr '\n\035' '\0\n' | xargs -0 ls -1d -- 2>/dev/null | head -n80)
	if [ "$dlin" ]; then
		printf "\n%s\n" "$dlin"
		echo "^^^: File(s) already exist"
		echo "s) skip all (cannot be undone)"
		echo "i) prompt before overwrite (cannot be undone)"
		echo "w) overwrite all (cannot be undone)"
		echo "q) abort"
		read -p "(s/i/w/q) [default=q]: " -r x
		[ "${x%[siw]}" -o ! "$x" ] && sff_abort
	fi

	sed -e "s$\n$PWD/" "$cpbuf" | tr '\n\035' '\0\n' >"$exbuf1"

	case "$op" in
	'copy') sed "s^.*/$PWD/" "$cpbuf" | tr '\n\035' '\0\n' >"$exbuf2"
		[ "$1" ] && : >"$cpbuf";;
	'move') sed "s^.*/$PWD/" "$cpbuf" | paste -d '' - "$cpbuf" | tr '\037\n\035' '\0\0\n' >"$exbuf2"
		: >"$cpbuf";;
	esac

	x=${x:-'0'}
	sff_do_paste "$op" "$x"
}

sff_do_paste()
{
	printf "%s" "$1" >"$lastop"
	[ "$2" != '0' ] && touch -mt 202310011200.00 "$lastop"
	sffpipe_sel_new "$exbuf2"

	case "$1" in
	'copy') case "$2" in
		'0'|'w') xargs -0 -n2 cp -afv -- <"$exbuf1" || err=1;;
		's') xargs -0 -n2 cp -anv -- <"$exbuf1" || err=1;;
		'i') xargs -0 -n2 -o cp -aiv -- <"$exbuf1" || err=1;;
		esac
		;;
	'move') case "$2" in
		'0'|'w') xargs -0 -n2 mv -fv -- <"$exbuf1" || err=1;;
		's') xargs -0 -n2 mv -nv -- <"$exbuf1" || err=1;;
		'i') xargs -0 -n2 -o mv -iv -- <"$exbuf1" || err=1;;
		esac
		;;
	esac
	[ "$err" ] && read -p "Press Enter to continue " -r x
}

sff_rename()
{
	[ ! -s "$sel" ] && exit 0
	sff_init_bufs
	tlist="${sffdir}/.Rename"
	rm -f "$tsel" "$tlist" "$tbuf1" "$tbuf2"
	tr '\n\0' '\035\n' <"$sel" >"$tsel"

	sed 's/\/[^/]*$//' "$tsel" >"$tbuf1"
	[ $(sort -u "$tbuf1" | wc -l | tr -d ' ') = 1 ] \
	&& sed 's/^.*\///' "$tsel" >"$tlist" || cat "$tsel" >"$tlist"

	while true; do
		"$EDITOR" "$tlist"
		sed -e 's/^.*\///' -e 's/^[ \t]*$//' "$tlist" | paste -d '/' "$tsel" "$tbuf1" - \
		| sed -e '/^\(.*\)\1$/d' -e '/^/d' -e '/\/$/d' >"$tbuf2"
		[ ! -s "$tbuf2" ] && sff_abort "$tlist"

		dlin1=$(cut -d '' -f2 "$tbuf2" | sort | uniq -d | head -n80)
		[ "$dlin1" ] && printf "\n%s\n^^^: The list has duplicate names\n" "$dlin1"

		dlin2=$(cut -d '' -f2 "$tbuf2" | tr '\n\035' '\0\n' | xargs -0 ls -1d -- 2>/dev/null | head -n80)
		[ "$dlin2" ] && printf "\n%s\n^^^: File(s) already exist\n" "$dlin2"

		[ -z "$dlin1" ] && [ -z "$dlin2" ] && break
		echo "e) edit the list"
		echo "q) abort"
		read -p "(e/q) [default=e]: " -r x
		[ "$x" = 'q' ] && sff_abort "$tlist"
	done

	tr '\037\n\035' '\0\0\n' <"$tbuf2" >"$exbuf1"
	sed 's/\(.*\)\(.*\)/\2\1/' "$tbuf2" | tr '\037\n\035' '\0\0\n' >"$exbuf2"

	rm -f "$tsel" "$tlist" "$tbuf1" "$tbuf2"
	sff_do_rename
}

sff_do_rename()
{
	printf "rename" >"$lastop"
	sffpipe_sel_new "$exbuf2"

	xargs -0 -n2 mv -nv -- <"$exbuf1" || err=1
	[ "$err" ] && read -p "Press Enter to continue " -r x
}

sff_undo_move()
{
	[ ! -s "$exbuf2" ] && exit 0
	op=$(cat "$lastop")
	echo ""
	xargs -0 -n2 printf "%s -> %s\n" <"$exbuf2" | head -n160
	read -p "Undo '$op' operation? (y/n) [default=n]: " -r x
	[ "$x" != 'y' ] && exit 0

	printf "un%s" "$op" >"$lastop"
	sffpipe_sel_new "$exbuf1"

	xargs -0 -n2 mv -n -- <"$exbuf2" || err=1
	[ "$err" ] && read -p "Press Enter to continue " -r x
}

sff_duplicate()
{
	[ ! -s "$sel" ] && exit 0
	printf "\nEnter the number of copies ('q' to cancel)\n"
	read -p "(number/q) [default=1]: " -r x
	x=${x%${x##*[![:space:]]}}
	x=$(printf "%s" "${x:-'1'}" | tr -cd '0-9')
	x=${x#${x%%[!0]*}}
	[ -z "$x" ] && exit 0

	sff_init_bufs
	rm -f "$tsel"; tr '\n\0' '\035\n' <"$sel" >"$tsel"

	: >"$exbuf1"; : >"$exbuf2"
	while IFS='' read -r pa; do
		num=1
		pa=$(printf "%s" "$pa" | tr '\035' '\n')

		for i in $(seq "$x"); do
			npa="${pa}_$num"
			k=$num
			while [ -e "$npa" ]; do
				k=$((k+1))
				npa="${pa}_$k"
			done
			num=$((k+1))

			printf "%s\0%s\0" "$pa" "$npa" >>"$exbuf1"
			printf "%s\0" "$npa" >>"$exbuf2"
		done
	done <"$tsel"
	rm -f "$tsel"

	[ ! -s "$exbuf1" ] && sff_abort
	sff_do_duplicate
}

sff_do_duplicate()
{
	printf "duplicate" >"$lastop"
	sffpipe_sel_new "$exbuf2"

	xargs -0 -n2 cp -an -- <"$exbuf1" || err=1
	[ "$err" ] && read -p "Press Enter to continue " -r x
}

sff_delete()
{
	[ ! -s "$sel" ] && exit 0
	rm -f "$tsel"; tr '\n\0' '\035\n' <"$sel" >"$tsel"

	echo ""
	cat "$tsel" | head -n160
	echo "Permanently delete" $(wc -l <"$tsel") "file(s), this action cannot be undone"
	rm -f "$tsel"
	read -p "Are you sure? (y/n) [default=n]: " -r x
	[ "$x" != 'y' ] && exit 0
	sffpipe_refresh

	xargs -0 rm -rf -- <"$sel" || err=1
	[ -z "$err" ] && sffpipe_clear_sel
	[ "$err" ] && read -p "Press Enter to continue " -r x
}

sff_chmod_chown()
{
	[ ! -s "$sel" ] && exit 0
	printf "\nEnter permissions (e.g., 644, a+x) or owner and group (e.g., cat:wheel)\n"
	echo "Add -R at the beginning to apply changes recursively"
	echo "Press Enter to cancel"
	read -p ": " -r x
	x=${x%${x##*[![:space:]]}}
	[ -z "$x" ] && exit 0
	sffpipe_refresh

	case "$x" in
	*:*) xargs -0 chown $x <"$sel" || err=1;;
	*) xargs -0 chmod $x <"$sel" || err=1;;
	esac
	[ "$err" ] && read -p "Press Enter to continue " -r x
}

sff_find()
{
	[ ! -p "$sffpipe" ] && exit 0
	printf "\nType a name pattern or press Enter to cancel\n"
	read -p "find ./ -name " -r x
	[ -z "$x" ] && exit 0

	echo "Optionally, add more options (e.g., -type d, -size +4k)"
	read -p ": " -r y
	echo "searching..."

	printf "f" >"$sffpipe"
	find ./ $y -name "$x" | sed -e 's/^\.\///' | tr '\n' '\0' 1>>"$sffpipe"
	printf "\036" >>"$sffpipe"
}

sff_fzf_find()
{
	f=$(fzf)
	[ "$f" ] && printf ">%s\036" "$f" >"$sffpipe"
}

sff_file_stat()
{
	[ ! -s "$sel" ] && exit 0
	rm -f "$tsel"; tr '\n\0' '\035\n' <"$sel" >"$tsel"

	while IFS='' read -r f; do
		echo ""
		f="$(printf "%s" "$f" | tr '\035' '\n')"

		case "$(uname -s)" in
		"Linux") stat "$f";;
		*) stat -f "File: %N %nSize: %z %t Blocks: %b %t IO Block: %k %nDevice: %d %t Inode: %i %t Links: %l %nAccess: %p/%Sp %t Uid: %u/%Su %t Gid: %g/%Sg %nAccess: %Sa %nModify: %Sm %nChange: %Sc"\
				 -t "%Y-%m-%d %H:%M:%S %z %s" "$f";;
		esac

		file -bi "$f"
		file -b "$f"
	done <"$tsel"
	rm -f "$tsel"
	read -p "Press Enter to continue " -r x
}

sff_disk_usage()
{
	[ ! -s "$sel" ] && exit 0
	echo ""
	xargs -0 du -shc -- <"$sel" | sort -h
	echo ""
	df -h "$PWD"
	read -p "Press Enter to continue " -r x
}

sff_extract()
{
	[ ! -s "$sel" ] && exit 0
	printf "\nx) extract archive(s)\n"
	echo "l) show the contents"
	echo "q) cancel"
	read -p "(x/l/q) [default=l]: " -r x

	[ "$x" = 'q' ] && exit 0
	[ "$x" != 'x' ] && x='l'
	rm -f "$tsel"; tr '\n\0' '\035\n' <"$sel" >"$tsel"
	sffpipe_refresh 'clrsel'

	while IFS='' read -r pa; do
		pa=$(printf "%s" "$pa" | tr '\035' '\n')
		ppa=${pa%/*}
		name=${pa##*/}

		[ -f "$pa" -a -s "$pa" ] || continue
		case "$name" in
		*?.?*) bname=${name%.?*}
			bname=${bname%.tar};;
		*) continue;;
		esac

		case "$x" in
		'l') case "$(printf "%s" "$name" | tr '[A-Z]' '[a-z]')" in
			*?.zip) unzip -l "$pa" | less;;
			*?.7z) 7z l "$pa" | less;;
			*?.rar) unrar l "$pa" | less;;
			*?.tar.gz|*?.tar.bz2|*?.tar.xz) tar -tvf "$pa" | less;;
			*?.gz) zcat "$pa" | less;;
			*?.bz2) bzcat "$pa" | less;;
			*?.xz) xzcat "$pa" | less;;
			*?.?*) tar -tvf "$pa" | less;;
			esac
			break
			;;
		'x') mkdir -p "${ppa}/$bname" || { err=1; continue; }
			cd "${ppa}/$bname"
			case "$(printf "%s" "$name" | tr '[A-Z]' '[a-z]')" in
			*?.zip) unzip "$pa" || err=1;;
			*?.7z) 7z e "$pa" || err=1;;
			*?.rar) unrar e "$pa" || err=1;;
			*?.tar.gz|*?.tar.bz2|*?.tar.xz) tar -xvf "$pa" || err=1;;
			*?.gz) rm -r "${ppa}/$bname"; gunzip -k "$pa" || err=1;;
			*?.bz2) rm -r "${ppa}/$bname"; bunzip2 -k "$pa" || err=1;;
			*?.xz) rm -r "${ppa}/$bname"; unxz -k "$pa" || err=1;;
			*?.?*) tar -xvf "$pa" || err=1;;
			esac
			;;
		esac
	done <"$tsel"

	rm -f "$tsel"
	[ "$err" ] && read -p "Press Enter to continue " -r x
}

sff_archive()
{
	[ ! -s "$sel" ] && exit 0
	sff_pwd_perm
	rm -f "$tsel" "$tbuf1" "$tbuf2"
	tr '\n\0' '\035\n' <"$sel" >"$tsel"

	onam=$(tail -n1 "$tsel" | sed 's/^.*\///')
	printf "%s\n" "$onam" >"$tbuf1"

	while true; do
		"$EDITOR" "$tbuf1"
		name=$(head -n1 "$tbuf1")
		[ -z "$name" -o "$name" = "$onam" ] && sff_abort
		if [ -e "$name" ]; then
			echo "$name already exist"
			echo "e) edit the list"
			echo "q) abort"
			read -p "(e/q) [default=e]: " -r x
			echo ""
			[ "$x" = 'q' ] && sff_abort
		else
			break
		fi
	done
	sffpipe_sel_new	"$name"

	wd=$(printf "%s" "$PWD" | tr '\n' '\035')
	sed "s^$wd/" "$tsel" | tr '\n\035' '\0\n' >"$tbuf2"

	case "$(printf "%s" "$name" | tr '[A-Z]' '[a-z]')" in
	*?.zip) xargs -0 zip -r "$name" -- <"$tbuf2" || err=1;;
	*?.7z) xargs -0 7z a "$name" -- <"$tbuf2" || err=1	;;
	*?.tar.gz|*?.tar.bz2|*?.tar.xz) xargs -0 tar -a -cvf "$name" -- <"$tbuf2" || err=1;;
	*.gz) xargs -0 gzip -k -- <"$tbuf2" || err=1;;
	*.bz2)xargs -0 bzip2 -k -- <"$tbuf2" || err=1;;
	*.xz) xargs -0 xz -k -- <"$tbuf2" || err=1;;
	*?.tar|*?.tgz|*?.tbz2|*?.txz) xargs -0 tar -a -cvf "$name" -- <"$tbuf2" || err=1;;
	*) read -p "Unknown file type. Press Enter to abort" -r x; sff_abort;;
	esac

	rm -f "$tsel" "$tbuf1" "$tbuf2"
	[ "$err" ] && read -p "Press Enter to continue " -r x
}

sff_undo()
{
	[ ! -s "$lastop" ] && exit 0
	[ "$(find "$lastop" -mmin +360)" ] && exit 0

	case "$(cat "$lastop")" in
	'new'|'copy'|'duplicate') sff_undo_new;;
	'move'|'rename') sff_undo_move;;
	esac
}

sff_redo()
{
	[ ! -s "$lastop" ] && exit 0

	case "$(cat "$lastop")" in
	'unnew') sff_do_new;;
	'uncopy') sff_do_paste 'copy' '0';;
	'unmove') sff_do_paste 'move' '0';;
	'unrename') sff_do_rename;;
	'unduplicate') sff_do_duplicate;;
	esac
}

sff_help()
{
	sed -n '/[ ][#][?][>][ ]/p' "$0" | sed 's/^.*[#][?][>]//' | less
}


# === custom functions ===



# === key bindings ===
case "$1" in                #?> Extension functions:
'n') sff_new;;              #?>     Alt-n  Create files (ends with '/' for dirs)
'd') sff_delete;;           #?>     Alt-d  Delete
'y') sff_write_cbuf 'cp';;  #?>     Alt-y  Copy
'x') sff_write_cbuf 'mv';;  #?>     Alt-x  Cut
'v') sff_view_cbuf;;        #?>     Alt-v  View copy/cut buffer
'V') sff_clear_cbuf;;       #?>     Alt-V  Clear copy/cut buffer
'p') sff_paste 'd';;        #?>     Alt-p  Paste
'P') sff_paste;;            #?>     Alt-P  Paste and keep copy buffer
'r') sff_rename;;           #?>     Alt-r  Rename
'Y') sff_duplicate;;        #?>     Alt-Y  Duplicate
'm') sff_chmod_chown;;      #?>     Alt-m  Change permissions or owner
'f') sff_find;;             #?>     Alt-f  Advanced search
'F') sff_fzf_find;;         #?>     Alt-F  Search with 'fzf'
'i') sff_file_stat;;        #?>     Alt-i  Show file status
'I') sff_disk_usage;;       #?>     Alt-I  Show disk usage
'z') sff_extract;;          #?>     Alt-z  Extract
'Z') sff_archive;;          #?>     Alt-Z  Archive
'u') sff_undo;;             #?>     Alt-u  Undo last operation
'U') sff_redo;;             #?>     Alt-U  Redu last operation
'/') sff_help;;             #?>     Alt-/  Show this help
esac                        #?> Press 'q' to leave this page.
